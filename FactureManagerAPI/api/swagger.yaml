---
swagger: "2.0"
info:
  description: "API De gestion de la facturation"
  version: "1.0.0"
  title: "Facturation API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "sebastien.piovesan@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v1"
tags:
- name: "customer"
  description: "gestion des customers"
- name: "customers"
  description: "gestion des customers"
- name: "invoice"
  description: "gestion des invoices"
- name: "line"
  description: "gestion des lines de invoice"
- name: "product"
  description: "gestion des products"
- name: "barcode"
  description: "gestion des barcode"
- name: "barcodes"
  description: "gestion des barcodes"
- name: "price"
  description: "gestion des prix des produits par client"
- name: "prices"
  description: "gestion des prix des produits par client"
schemes:
- "http"
paths:
  /customer:
    post:
      tags:
      - "customer"
      summary: "Ajoute un nouveau customer"
      description: ""
      operationId: "addCustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un customer à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_customer"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:customers"
        - "read:customers"
      x-swagger-router-controller: "Customer"
    put:
      tags:
      - "customer"
      summary: "Met à jour un customer existant"
      description: ""
      operationId: "updateCustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un customer à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_customer"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:customers"
        - "read:customers"
      x-swagger-router-controller: "Customer"
  /customer/{customerId}:
    get:
      tags:
      - "customer"
      summary: "Find customer by ID"
      description: "Returns a single customer"
      operationId: "getCustomerById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/customer_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Customer"
    post:
      tags:
      - "customer"
      summary: "Updates a customer in the store with form data"
      description: ""
      operationId: "updateCustomerWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer that needs to be updated"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Updated name of the customer"
        required: false
        type: "string"
      - name: "address"
        in: "formData"
        description: "Updated address of the customer"
        required: false
        type: "string"
      - name: "zipcode"
        in: "formData"
        description: "Updated zipcode of the customer"
        required: false
        type: "string"
      - name: "city"
        in: "formData"
        description: "Updated city of the customer"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:customers"
        - "read:customers"
      x-swagger-router-controller: "Customer"
    delete:
      tags:
      - "customer"
      summary: "Deletes a customer"
      description: ""
      operationId: "deleteCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "customerId"
        in: "path"
        description: "Customer id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - facturation_auth:
        - "write:customers"
        - "read:customers"
      x-swagger-router-controller: "Customer"
  /customers:
    get:
      tags:
      - "customers"
      summary: "Find customers"
      description: "Returns all customers"
      operationId: "getCustomers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/customers_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "no customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Customers"
  /invoice:
    post:
      tags:
      - "invoice"
      summary: "Ajoute une nouvelle facture"
      description: ""
      operationId: "addInvoice"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'une facture à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_invoice"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:invoices"
        - "read:invoices"
      x-swagger-router-controller: "Invoice"
    put:
      tags:
      - "invoice"
      summary: "Met à jour un invoice existant"
      description: ""
      operationId: "updateInvoice"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un invoice à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_invoice"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Invoice not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:invoices"
        - "read:invoices"
      x-swagger-router-controller: "Invoice"
  /customer/{customerId}/invoice/:
    get:
      tags:
      - "invoice"
      summary: "Find current invoice by customer ID"
      description: "Returns the current invoice (status opened) for the customer in parameter"
      operationId: "getCurrentInvoiceByCustomerId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/invoice_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Invoice not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Invoice"
  /invoice/{invoiceId}:
    get:
      tags:
      - "invoice"
      summary: "Find invoice by ID"
      description: "Returns a single invoice"
      operationId: "getInvoiceById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "invoiceId"
        in: "path"
        description: "ID of invoice to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/invoice_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Invoice not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Invoice"
    post:
      tags:
      - "invoice"
      summary: "Updates a invoice in the store with form data"
      description: ""
      operationId: "updateInvoiceWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "invoiceId"
        in: "path"
        description: "ID of invoice that needs to be updated"
        required: true
        type: "string"
      - name: "status"
        in: "formData"
        required: true
        type: "string"
        format: "Order Status"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:invoices"
        - "read:invoices"
      x-swagger-router-controller: "Invoice"
    delete:
      tags:
      - "invoice"
      summary: "Deletes a invoice"
      description: ""
      operationId: "deleteInvoice"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "invoiceId"
        in: "path"
        description: "Invoice id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Invoice not found"
      security:
      - facturation_auth:
        - "write:invoices"
        - "read:invoices"
      x-swagger-router-controller: "Invoice"
  /line:
    post:
      tags:
      - "line"
      summary: "Ajoute une nouvelle line"
      description: ""
      operationId: "addLine"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'une line à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_line"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:lines"
        - "read:lines"
      x-swagger-router-controller: "Line"
    put:
      tags:
      - "line"
      summary: "Met à jour un line existant"
      description: ""
      operationId: "updateLine"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un line à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_line"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Line not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:lines"
        - "read:lines"
      x-swagger-router-controller: "Line"
  /customer/{customerId}/product/{productId}/line:
    get:
      tags:
      - "line"
      summary: "add a product fee line for the current invoice of customer passed in parameters"
      description: "add a product fee line for the current invoice of customer passed in parameters"
      operationId: "addLineForProductAndCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      - name: "productId"
        in: "path"
        description: "ID of product"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/line_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Line"
  /line/{lineId}:
    get:
      tags:
      - "line"
      summary: "Find line by ID"
      description: "Returns a single line"
      operationId: "getLineById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "lineId"
        in: "path"
        description: "ID of line to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/line_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Line not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Line"
    post:
      tags:
      - "line"
      summary: "Updates a line in the store with form data"
      description: ""
      operationId: "updateLineWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "lineId"
        in: "path"
        description: "ID of line that needs to be updated"
        required: true
        type: "string"
      - name: "invoiceId"
        in: "formData"
        required: true
        type: "string"
      - name: "quantity"
        in: "formData"
        required: true
        type: "integer"
        format: "int32"
      - name: "price"
        in: "formData"
        required: true
        type: "number"
        format: "double"
      - name: "description"
        in: "formData"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:lines"
        - "read:lines"
      x-swagger-router-controller: "Line"
    delete:
      tags:
      - "line"
      summary: "Deletes a line"
      description: ""
      operationId: "deleteLine"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "lineId"
        in: "path"
        description: "Line id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Line not found"
      security:
      - facturation_auth:
        - "write:lines"
        - "read:lines"
      x-swagger-router-controller: "Line"
  /product:
    post:
      tags:
      - "product"
      summary: "Ajoute une nouvelle product"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'une product à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_product"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:products"
        - "read:products"
      x-swagger-router-controller: "Product"
    put:
      tags:
      - "product"
      summary: "Met à jour un product existant"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un product à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_product"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:products"
        - "read:products"
      x-swagger-router-controller: "Product"
  /product/{productId}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Product"
    post:
      tags:
      - "product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        required: true
        type: "string"
      - name: "prixunitaire"
        in: "formData"
        required: true
        type: "number"
        format: "double"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:products"
        - "read:products"
      x-swagger-router-controller: "Product"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      security:
      - facturation_auth:
        - "write:products"
        - "read:products"
      x-swagger-router-controller: "Product"
  /products:
    get:
      tags:
      - "products"
      summary: "Find products"
      description: "Returns all products"
      operationId: "getProducts"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/products_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "no product found"
      security:
      - api_key: []
      x-swagger-router-controller: "Products"
  /invoice/{invoiceId}/lines:
    get:
      tags:
      - "lines"
      summary: "Find lines"
      description: "Returns all lines"
      operationId: "getLines"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "invoiceId"
        in: "path"
        description: "invoice id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/lines_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "no line found"
      security:
      - api_key: []
      x-swagger-router-controller: "Lines"
  /barcode:
    post:
      tags:
      - "barcode"
      summary: "Ajoute un nouveau barcode"
      description: ""
      operationId: "addBarcode"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un barcode à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_barcode"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:barcodes"
        - "read:barcodes"
      x-swagger-router-controller: "Barcode"
    put:
      tags:
      - "barcode"
      summary: "Met à jour un barcode existant"
      description: ""
      operationId: "updateBarcode"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un barcode à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_barcode"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Barcode not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:barcodes"
        - "read:barcodes"
      x-swagger-router-controller: "Barcode"
  /barcode/{barcodeId}:
    get:
      tags:
      - "barcode"
      summary: "Find barcode by ID"
      description: "Returns a single barcode"
      operationId: "getBarcodeById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "barcodeId"
        in: "path"
        description: "ID of barcode to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/barcode_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Barcode not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Barcode"
    post:
      tags:
      - "barcode"
      summary: "Updates a barcode in the store with form data"
      description: ""
      operationId: "updateBarcodeWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "barcodeId"
        in: "path"
        description: "ID of barcode that needs to be updated"
        required: true
        type: "string"
      - name: "productId"
        in: "formData"
        description: ""
        required: false
        type: "string"
      - name: "customerId"
        in: "formData"
        description: ""
        required: false
        type: "string"
      - name: "value"
        in: "formData"
        description: ""
        required: false
        type: "integer"
        format: "int32"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:barcodes"
        - "read:barcodes"
      x-swagger-router-controller: "Barcode"
    delete:
      tags:
      - "barcode"
      summary: "Deletes a barcode"
      description: ""
      operationId: "deleteBarcode"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "barcodeId"
        in: "path"
        description: "Barcode id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Barcode not found"
      security:
      - facturation_auth:
        - "write:barcodes"
        - "read:barcodes"
      x-swagger-router-controller: "Barcode"
  /barcodes:
    get:
      tags:
      - "barcodes"
      summary: "Find barcodes"
      description: "Returns all barcodes"
      operationId: "getBarcodes"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/barcodes_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "no barcode not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Barcodes"
  /customer/{customerId}/product/{productId}/barcode:
    post:
      tags:
      - "barcode"
      summary: "add a barcode for the current product and customer"
      description: "add a barcode for the current product and customer"
      operationId: "addBarCodeForProductAndCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      - name: "productId"
        in: "path"
        description: "ID of product"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/barcode_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Barcode"
  /customer/{customerId}/barcodes:
    post:
      tags:
      - "barcodes"
      summary: "add barcodes for all product for the customer in parameter"
      description: "add barcodes for all product for the customer in parameter"
      operationId: "addBarCodesForCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/barcodes_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Barcodes"
    get:
      tags:
      - "barcodes"
      summary: "get All barcodes for the customer in parameter"
      description: "add barcodes for all product for the customer in parameter"
      operationId: "getBarCodesForCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/barcodes_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Barcodes"
  
  /price:
    post:
      tags:
      - "price"
      summary: "Ajoute un nouveau price"
      description: ""
      operationId: "addPrice"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un price à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_price"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:prices"
        - "read:prices"
      x-swagger-router-controller: "Price"
    put:
      tags:
      - "price"
      summary: "Met à jour un price existant"
      description: ""
      operationId: "updatePrice"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "description d'un price à ajouter a la base de données"
        required: true
        schema:
          $ref: "#/definitions/body_price"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Price not found"
        405:
          description: "Validation exception"
      security:
      - facturation_auth:
        - "write:prices"
        - "read:prices"
      x-swagger-router-controller: "Price"
  /price/{priceId}:
    get:
      tags:
      - "price"
      summary: "Find price by ID"
      description: "Returns a single price"
      operationId: "getPriceById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "priceId"
        in: "path"
        description: "ID of price to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/price_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Price not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Price"
    post:
      tags:
      - "price"
      summary: "Updates a price in the store with form data"
      description: ""
      operationId: "updatePriceWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "priceId"
        in: "path"
        description: "ID of price that needs to be updated"
        required: true
        type: "string"
      - name: "productId"
        in: "formData"
        description: ""
        required: false
        type: "string"
      - name: "customerId"
        in: "formData"
        description: ""
        required: false
        type: "string"
      - name: "price"
        in: "formData"
        description: ""
        required: true
        type: "number"
        format: "double"
      responses:
        405:
          description: "Invalid input"
      security:
      - facturation_auth:
        - "write:prices"
        - "read:prices"
      x-swagger-router-controller: "Price"
    delete:
      tags:
      - "price"
      summary: "Deletes a price"
      description: ""
      operationId: "deletePrice"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "priceId"
        in: "path"
        description: "Price id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Price not found"
      security:
      - facturation_auth:
        - "write:prices"
        - "read:prices"
      x-swagger-router-controller: "Price"
  /prices:
    get:
      tags:
      - "prices"
      summary: "Find prices"
      description: "Returns all prices"
      operationId: "getPrices"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/prices_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "price not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Prices"
  /customer/{customerId}/product/{productId}/price:
    post:
      tags:
      - "price"
      summary: "add a custom price for the current product and customer"
      description: "add a custom price for the current product and customer"
      operationId: "addBarCodeForProductAndCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      - name: "productId"
        in: "path"
        description: "ID of product"
        required: true
        type: "string"
      - name: "price"
        in: "formData"
        required: true
        type: "number"
        format: "double"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/price_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Price"
  /customer/{customerId}/prices:
    get:
      tags:
      - "prices"
      summary: "get All prices for the customer in parameter"
      description: "add prices for all product for the customer in parameter"
      operationId: "getBarCodesForCustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/prices_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Prices"
  
  
securityDefinitions:
  facturation_auth:
    type: "oauth2"
    authorizationUrl: "http://localhost:3000/oauth/dialog"
    flow: "implicit"
    scopes:
      write:customers: "modify customers in your account"
      read:customers: "read your customers"
      write:invoices: "modify invoices in your account"
      read:invoices: "read your invoices"
      write:lines: "modify invoices in your account"
      read:lines: "read your invoices"
      write:products: "modify invoices in your account"
      read:products: "read your invoices"
      write:barcodes: "modify barcodes"
      read:barcodes: "read barcodes"
      write:prices: "modify prices"
      read:prices: "read prices"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Invoice:
    type: "object"
    properties:
      _id:
        type: "string"
      customerId:
        type: "string"
      number:
        type: "string"
      creation_date:
        type: "string"
        format: "date-time"
      start_period:
        type: "string"
        format: "date"
      end_period:
        type: "string"
        format: "date"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "under_construction"
        - "validated"
        - "edited"
    xml:
      name: "Invoice"
  Line:
    type: "object"
    properties:
      _id:
        type: "string"
      invoiceId:
        type: "string"
      productId:
        type: "string"
      creation_date:
        type: "string"
        format: "date"
      description:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Line"
  Product:
    type: "object"
    properties:
      _id:
        type: "string"
      description:
        type: "string"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Product"
  Customer:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      zipcode:
        type: "string"
      city:
        type: "string"
    xml:
      name: "Customer"
  Barcode:
    type: "object"
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      value:
        type: "integer"
        format: "int64"
    xml:
      name: "Barcode"
  Price:
    type: "object"
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Barcode"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  customer_response_200:
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      zipcode:
        type: "string"
      city:
        type: "string"
    xml:
      name: "Customer"
  barcode_response_200:
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      value:
        type: "integer"
        format: "int64"
    xml:
      name: "Barcode"
  price_response_200:
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Price"
  line_response_200:
    properties:
      _id:
        type: "string"
      invoiceId:
        type: "string"
      productId:
        type: "string"
      creation_date:
        type: "string"
        format: "date"
      description:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Line"
  product_response_200:
    properties:
      _id:
        type: "string"
      description:
        type: "string"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Product"
  invoice_response_200:
    properties:
      _id:
        type: "string"
      customerId:
        type: "string"
      number:
        type: "string"
      creation_date:
        type: "string"
        format: "date-time"
      start_period:
        type: "string"
        format: "date"
      end_period:
        type: "string"
        format: "date"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "under_construction"
        - "validated"
        - "edited"
    xml:
      name: "Invoice"
  customers_response_200:
    properties:
      customers:
        type: "array"
        xml:
          name: "Customers"
          wrapped: true
        items:
          $ref: "#/definitions/Customer"
  barcodes_response_200:
    properties:
      barcodes:
        type: "array"
        xml:
          name: "Barcodes"
          wrapped: true
        items:
          $ref: "#/definitions/Barcode"
  prices_response_200:
    properties:
      prices:
        type: "array"
        xml:
          name: "Prices"
          wrapped: true
        items:
          $ref: "#/definitions/Price"
  products_response_200:
    properties:
      customers:
        type: "array"
        xml:
          name: "Products"
          wrapped: true
        items:
          $ref: "#/definitions/Product"
  lines_response_200:
    properties:
      lines:
        type: "array"
        xml:
          name: "Lines"
          wrapped: true
        items:
          $ref: "#/definitions/Line"
  body_invoice:
    type: "object"
    properties:
      customerId:
        type: "string"
      number:
        type: "string"
      creation_date:
        type: "string"
        format: "date-time"
      start_period:
        type: "string"
        format: "date"
      end_period:
        type: "string"
        format: "date"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "under_construction"
        - "validated"
        - "edited"
    xml:
      name: "Invoice"
  body_line:
    type: "object"
    properties:
      invoiceId:
        type: "string"
      productId:
        type: "string"
      creation_date:
        type: "string"
        format: "date"
      description:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Line"
  body_product:
    type: "object"
    properties:
      description:
        type: "string"
      price:
        type: "number"
        format: "double"
    xml:
      name: "Product"
  body_customer:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      zipcode:
        type: "string"
      city:
        type: "string"
    xml:
      name: "Customer"
  body_barcode:
    type: "object"
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      value:
        type: "integer"
        format: "int64"
    xml:
      name: "Barcode"
  body_price:
    type: "object"
    properties:
      _id:
        type: "string"
      productId:
        type: "string"
      customerId:
        type: "string"
      value:
        type: "number"
        format: "double"
    xml:
      name: "Price"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
